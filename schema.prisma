generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    JOBSEEKER
    EMPLOYER
    ADMIN
}

model Profile {
    id          String   @id @default(cuid())
    userId      String   @unique
    bio         String?
    location    String?
    skills      String[]
    resumeUrl   String?
    linkedinUrl String?
    githubUrl   String?
    websiteUrl  String?
    role        Role     @default(JOBSEEKER)

    applications JobApplication[]
    postedJobs   Job[]            @relation("EmployerJobs")
    savedJobs    SavedJob[]
    education    Education[]
    experience   Experience[]

    companyId String?
    company   Company? @relation(fields: [companyId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Education {
    id           String    @id @default(cuid())
    institution  String
    degree       String
    fieldOfStudy String
    startDate    DateTime
    endDate      DateTime?
    description  String?

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Experience {
    id          String    @id @default(cuid())
    company     String
    position    String
    location    String?
    startDate   DateTime
    endDate     DateTime?
    description String?

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Company {
    id          String    @id @default(cuid())
    name        String
    description String
    logoUrl     String?
    websiteUrl  String?
    location    String
    jobs        Job[]
    Profile     Profile[]
}

model Job {
    id           String    @id @default(cuid())
    title        String
    description  String
    requirements String[]
    salary       String?
    location     String
    type         JobType
    status       JobStatus @default(OPEN)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    expiresAt    DateTime?

    applications JobApplication[]
    savedBy      SavedJob[]
    categories   JobCategory[]

    companyId String
    company   Company @relation(fields: [companyId], references: [id])

    postedById String
    postedBy   Profile @relation("EmployerJobs", fields: [postedById], references: [id])
}

enum JobType {
    FULL_TIME
    PART_TIME
    CONTRACT
    INTERNSHIP
    REMOTE
}

enum JobStatus {
    OPEN
    CLOSED
    FILLED
}

model JobApplication {
    id          String            @id @default(cuid())
    status      ApplicationStatus @default(PENDING)
    coverLetter String?
    resumeUrl   String?

    jobId String
    job   Job    @relation(fields: [jobId], references: [id])

    applicantId String
    applicant   Profile @relation(fields: [applicantId], references: [id])

    appliedAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
    PENDING
    REVIEWED
    SHORTLISTED
    REJECTED
    ACCEPTED
}

model SavedJob {
    id String @id @default(cuid())

    jobId String
    job   Job    @relation(fields: [jobId], references: [id])

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    savedAt DateTime @default(now())

    @@unique([jobId, profileId])
}

model JobCategory {
    id   Int    @id @default(autoincrement())
    name String @unique
    jobs Job[]
}
