generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int              @id @default(autoincrement())
    email        String           @unique
    name         String
    password     String
    role         Role             @default(JOBSEEKER)
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    profile      Profile?
    applications JobApplication[]
    postedJobs   Job[]            @relation("EmployerJobs")
    savedJobs    SavedJob[]
    education    Education[]
    experience   Experience[]
}

enum Role {
    JOBSEEKER
    EMPLOYER
    ADMIN
}

model Profile {
    id          Int      @id @default(autoincrement())
    userId      Int      @unique
    user        User     @relation(fields: [userId], references: [id])
    bio         String?
    location    String?
    skills      String[]
    resumeUrl   String?
    linkedinUrl String?
    githubUrl   String?
    websiteUrl  String?
}

model Education {
    id           Int       @id @default(autoincrement())
    userId       Int
    user         User      @relation(fields: [userId], references: [id])
    institution  String
    degree       String
    fieldOfStudy String
    startDate    DateTime
    endDate      DateTime?
    description  String?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Experience {
    id          Int       @id @default(autoincrement())
    userId      Int
    user        User      @relation(fields: [userId], references: [id])
    company     String
    position    String
    location    String?
    startDate   DateTime
    endDate     DateTime?
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Company {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    logoUrl     String?
    websiteUrl  String?
    location    String
    jobs        Job[]
}

model Job {
    id           Int              @id @default(autoincrement())
    title        String
    description  String
    requirements String[]
    salary       String?
    location     String
    type         JobType
    status       JobStatus        @default(OPEN)
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    expiresAt    DateTime?
    companyId    Int
    company      Company          @relation(fields: [companyId], references: [id])
    postedById   Int
    postedBy     User             @relation("EmployerJobs", fields: [postedById], references: [id])
    applications JobApplication[]
    savedBy      SavedJob[]
    categories   JobCategory[]
}

enum JobType {
    FULL_TIME
    PART_TIME
    CONTRACT
    INTERNSHIP
    REMOTE
}

enum JobStatus {
    OPEN
    CLOSED
    FILLED
}

model JobApplication {
    id          Int               @id @default(autoincrement())
    jobId       Int
    job         Job               @relation(fields: [jobId], references: [id])
    applicantId Int
    applicant   User              @relation(fields: [applicantId], references: [id])
    status      ApplicationStatus @default(PENDING)
    coverLetter String?
    resumeUrl   String?
    appliedAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
}

enum ApplicationStatus {
    PENDING
    REVIEWED
    SHORTLISTED
    REJECTED
    ACCEPTED
}

model SavedJob {
    id      Int      @id @default(autoincrement())
    jobId   Int
    job     Job      @relation(fields: [jobId], references: [id])
    userId  Int
    user    User     @relation(fields: [userId], references: [id])
    savedAt DateTime @default(now())

    @@unique([jobId, userId])
}

model JobCategory {
    id   Int    @id @default(autoincrement())
    name String @unique
    jobs Job[]
}
